import { Resend } from 'resend';
import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';
import { AnalyticsLogger } from '@/utils/analytics-logger';

const resend = new Resend(process.env.RESEND_API_KEY);
const analyticsLogger = new AnalyticsLogger();

const EmailRequestSchema = z.object({
  email: z.string().email(),
  taskBreakdown: z.object({
    task: z.string(),
    breakdown: z.array(z.object({
      unit: z.string(),
      tasks: z.array(z.string())
    })),
    summary: z.string().optional()
  })
});

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const validatedData = EmailRequestSchema.parse(body);
    
    const { email, taskBreakdown } = validatedData;
    
    // Create HTML content for the email
    const htmlContent = createEmailTemplate(taskBreakdown);
    
    const { data, error } = await resend.emails.send({
      from: 'Task Breakdown Expert <onboarding@resend.dev>', // You'll need to change this to your verified domain
      to: [email],
      subject: `Your Personal Learning Plan: ${taskBreakdown.task}`,
      html: htmlContent,
    });

    if (error) {
      console.error('Email sending failed:', error);
      return NextResponse.json({ error: 'Failed to send email' }, { status: 500 });
    }

    // Track successful email send
    analyticsLogger.incrementEmailsSent();

    return NextResponse.json({ success: true, messageId: data?.id });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json({ error: 'Invalid request' }, { status: 400 });
  }
}

function createEmailTemplate(taskBreakdown: any): string {
  const { task, breakdown, summary } = taskBreakdown;
  
  const breakdownHtml = breakdown
    .map((week: any) => `
      <div style="margin-bottom: 24px; padding: 16px; border-left: 4px solid #3b82f6; background-color: #f8fafc;">
        <h3 style="color: #1e40af; font-size: 18px; margin-bottom: 8px;">${week.unit}</h3>
        <ul style="margin: 0; padding-left: 20px;">
          ${week.tasks.map((task: string) => `<li style="margin-bottom: 4px; color: #374151;">${task}</li>`).join('')}
        </ul>
      </div>
    `)
    .join('');

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Your Learning Plan</title>
    </head>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
      <div style="text-align: center; margin-bottom: 32px;">
        <h1 style="color: #1e40af; font-size: 28px; margin-bottom: 8px;">ðŸŽ¯ Your Personal Learning Plan</h1>
        <h2 style="color: #6b7280; font-size: 20px; font-weight: normal; margin: 0;">${task}</h2>
      </div>
      
      ${summary ? `
        <div style="background-color: #eff6ff; padding: 16px; border-radius: 8px; margin-bottom: 24px;">
          <h3 style="color: #1e40af; margin-top: 0;">ðŸ“‹ Plan Summary</h3>
          <p style="margin-bottom: 0; color: #374151;">${summary}</p>
        </div>
      ` : ''}
      
      <div style="margin-bottom: 32px;">
        <h3 style="color: #1e40af; font-size: 22px; margin-bottom: 16px;">ðŸ“… Weekly Breakdown</h3>
        ${breakdownHtml}
      </div>
      
      <div style="background-color: #f9fafb; padding: 16px; border-radius: 8px; text-align: center; margin-top: 32px;">
        <p style="margin: 0; color: #6b7280; font-size: 14px;">
          Generated by <strong>Task Breakdown Expert</strong><br>
          Your AI-powered learning companion
        </p>
      </div>
    </body>
    </html>
  `;
}
